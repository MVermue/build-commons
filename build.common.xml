<?xml version="1.0" encoding="UTF-8"?>
<project name="common-ant-targets" basedir=".">

    <!--
        Default values for some customizeable project settings
    -->
    <property name="project.dir" value="${ant.project.name}" />
    <property name="project.name" value="${ant.project.name}" />
    <property name="project.version" value="0.0.1" />
    <property name="project.stability" value="alpha" />

    <!--
        Some common settings for all project.
    -->
    <property name="builddir" value="${basedir}/build" />
    <property name="scriptdir" value="${basedir}/setup/scripts" />

    <!--
        Common build variables
    -->
    <tstamp>
        <format property="build.date" pattern="yyyy-MM-dd" />
    </tstamp>

    <target name="dist-continuous-integration" depends="init-continuous-integration-properties,dist" description="Continuous integration distribution build" />

    <target name="init-continuous-integration-properties">
        <buildnumber file="build-${project.version}${project.stability}.number" />

        <property name="build.version" value="${project.version}build${build.number}" />
        <property name="build.name" value="${project.name}_ci" />
        <property name="build.file" value="${build.name}-${build.version}" />

        <property name="phar.archive.bootstrap" value="" />
    </target>

    <target name="dist" depends="build,tag,pack" description="Default distribution build" />

    <target name="init-properties" unless="build.version">
        <property name="build.version" value="${project.version}" />
        <property name="build.name" value="${project.name}" />
        <property name="build.file" value="${build.name}-${build.version}" />

        <property name="phar.archive.bootstrap" value="" />
    </target>

    <target name="clean">
        <delete dir="${builddir}" includeemptydirs="true" />
    </target>

    <target name="update">
        <exec dir="${basedir}" executable="svn">
            <arg line="up" />
        </exec>
    </target>

    <target name="prepare" depends="clean,update,init-properties">
        <mkdir dir="${builddir}" />
        <mkdir dir="${builddir}/logs" />
        <mkdir dir="${builddir}/coverage" />
    </target>

    <!--
        Tests several aspects of the project.

        - Unit Tests
        - Other Tests
        - Static code analysis
        - Lint checks
    -->
    <target name="test" depends="test-static, test-dynamic" />

    <target name="test-static" depends="prepare">
        <parallel>
            <antcall target="lint" />
            <antcall target="checkstyle" />
            <antcall target="phpmd" />
            <antcall target="pdepend" />
            <antcall target="phpcpd" />
        </parallel>
    </target>

    <target name="test-dynamic" depends="prepare, alltest, unittest" />

    <!--
        Performance syntax error checks on the project sources.
    -->
    <target name="lint">
        <apply executable="php" failonerror="true">
            <arg value="-l" />
            <fileset dir="${basedir}/source">
                <include name="**/*.php" />
            </fileset>
            <fileset dir="${basedir}/test">
                <include name="**/*.php" />
                <exclude name="_source/**" />
            </fileset>
        </apply>
    </target>

    <target name="phpmd">
        <exec dir="${basedir}" executable="phpmd" failonerror="false">
            <arg line="source" />
            <arg line="xml" />
            <arg line="codesize,unusedcode" />
            <arg line="--reportfile ${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="pdepend">
        <exec dir="${basedir}" executable="pdepend" failonerror="false">
            <arg line="--summary-xml=${basedir}/build/logs/pdepend.xml" />
            <arg line="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg line="source" />
        </exec>
    </target>

    <target name="phpcpd">
<!--
        <exec dir="${basedir}" executable="phpcpd" failonerror="false">
            <arg line="- -log-pmd ${basedir}/build/logs/cpd.xml" />
            <arg line="source" />
        </exec>
-->
    </target>

    <!--
        Executes all tests for a project, includes unit, functional, integration
        or compatibility tests. 
    -->
    <target name="alltest">
        <exec dir="${basedir}/test" failonerror="true" executable="phpunit">
            <arg line="${phpunit.testsuite}" />
        </exec>
    </target>

    <!--
        Executes all unittests for a project and collects the coverage data for
        the project sources.
    -->
    <target name="unittest">
        <exec dir="${basedir}/test" failonerror="true" executable="phpunit">
            <arg line="--group unittest" />
            <arg line="--coverage-html   ${basedir}/build/coverage" />
            <arg line="--coverage-clover ${basedir}/build/logs/clover.xml" />
            <arg line="--log-junit       ${basedir}/build/logs/junit.xml" />
            <arg line="${phpunit.testsuite}" />
        </exec>
    </target>

    <!--
        Validates that the project code is compatible with the project's coding
        conventions.
    -->
    <target name="checkstyle">
        <exec dir="${basedir}" failonerror="true" executable="phpcs">
            <arg line="--standard=${coding.standard}" />
            <arg line="--report=checkstyle" />
            <arg line="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg line="${basedir}/source" />
        </exec>
    </target>

    <!--
        Creates different binary releases of the current project.
    -->
    <target name="pack" depends="pack-phar-archive,pack-pear-archive,pack-tar-archive" />

    <!--
        Creates a phar archive of the project source
    -->
    <target name="pack-phar-archive" depends="prepare,copy-files-for-phar-archive">
        <exec dir="${basedir}" executable="${scriptdir}/create.phar.php">
            <arg line="${project.name}" />
            <arg line="${builddir}/${build.file}.phar" />
            <arg line="${builddir}/phar-archive" />
            <arg line="${phar.archive.bootstrap}" />
        </exec>
    </target>

    <!--
        Copies all files for the project's phar archive.
    -->
    <target name="copy-files-for-phar-archive">
        <copy todir="${builddir}/phar-archive">
            <fileset dir="${basedir}/source"/>
        </copy>

        <antcall target="copy-library-dir-if-exists">
            <param name="output.dir" value="${builddir}/phar-archive" />
        </antcall>

        <antcall target="do-copy-files-for-xyz-archive">
            <param name="output.dir" value="${builddir}/phar-archive" />
        </antcall>
    </target>

    <!--
        Creates a pear archive of the project source
    -->
    <target name="pack-pear-archive" depends="prepare,copy-files-for-pear-archive">
        <exec dir="${builddir}" executable="pear">
            <arg line="package" />
            <arg line="pear-archive/package.xml" />
        </exec>
    </target>

    <!--
        Copies all files for the project's pear archive.
    -->
    <target name="copy-files-for-pear-archive">
        <copy todir="${builddir}/pear-archive/${project.dir}">
            <fileset dir="${basedir}/source"/>
            <fileset dir="${basedir}">
                <include name="**.sh" />
                <include name="**.php" />
                <include name="**.bat" />
            </fileset>
        </copy>

        <antcall target="copy-docs-dir-if-exists">
            <param name="output.dir" value="${builddir}/pear-archive" />
        </antcall>

        <copy file="${basedir}/LICENSE" todir="${builddir}/pear-archive" />
        <copy file="${basedir}/CHANGELOG" todir="${builddir}/pear-archive" />

        <copy file="${basedir}/package.xml" tofile="${builddir}/pear-archive/package.xml">
            <filterchain>
                <replacestring from="${project.name}" to="${build.name}" />
                <replacestring from='name="source"' to='name="${project.name}"' />
                <replacestring from="1970-01-01" to="${build.date}" />
                <replacestring from="0.0.0" to="${build.version}" />
                <replacestring from="devel" to="${project.stability}" />
            </filterchain>
        </copy>

        <antcall target="do-copy-files-for-xyz-archive">
            <param name="output.dir" value="${builddir}/pear-archive" />
        </antcall>
    </target>

    <!--
        Creates a tar.bz2 archive of the project source
    -->
    <target name="pack-tar-archive" depends="prepare,copy-files-for-tar-archive">
        <tar basedir="${builddir}/tar-archive"
             destfile="${builddir}/${build.file}.tar.bz2"
             compression="bzip2">

            <include name="${build.file}/**" />
        </tar>
    </target>

    <!--
        Copies all files for the project's tar archive.
    -->
    <target name="copy-files-for-tar-archive">
        <property name="output.dir" value="${builddir}/tar-archive/${build.file}" />
        
        <copy todir="${output.dir}/source">
            <fileset dir="${basedir}/source"/>
        </copy>

        <antcall target="copy-optional-dirs">
            <param name="output.dir" value="${output.dir}" />
        </antcall>

        <copy file="${basedir}/LICENSE" todir="${output.dir}" />
        <copy file="${basedir}/CHANGELOG" todir="${output.dir}" />

        <antcall target="do-copy-files-for-xyz-archive">
            <param name="output.dir" value="${output.dir}" />
        </antcall>
    </target>

    <!--
        Hook method for copying files for the project's xyz archive format.

        Parameters:
            output.dir      Output directory for the temporary build tree.
    -->
    <target name="do-copy-files-for-xyz-archive">
        <!-- Implement this target in the concrete project build.xml -->
    </target>

    <!--
        Copies several optional directories into the output dir.

        Parameters:
            output.dir      Output directory for the temporary build tree.
    -->
    <target name="copy-optional-dirs" depends="copy-library-dir-if-exists,copy-docs-dir-if-exists" />

    <!--
        Optionally copies a library directory into a temporary build tree.

        Parameters:
            output.dir      Output directory for the temporary build tree.
    -->
    <target name="copy-library-dir-if-exists" depends="test-library-dir-exists,copy-library-dir" />

    <!--
        Checks if the current project contains a library folder with external
        dependencies.
    -->
    <target name="test-library-dir-exists">
        <available file="${basedir}/lib" property="library-dir-exists" />
    </target>

    <!--
        Copies the library directory of the current project into a temporary
        build source tree.

        Parameters:
            output.dir      Output directory for the temporary build tree.
    -->
    <target name="copy-library-dir" if="library-dir-exists">
        <copy todir="${output.dir}/lib">
            <fileset dir="${basedir}/lib" />
        </copy>
    </target>

    <!--
        Optionally copies a documentation directory into a temporary build
        source tree.

        Parameters:
            output.dir      Output directory for the temporary build tree.
    -->
    <target name="copy-docs-dir-if-exists" depends="test-docs-dir-exists,copy-docs-dir" />

    <!--
        Checks if the current project has a document directory.
    -->
    <target name="test-docs-dir-exists">
        <available file="${basedir}/docs" property="docs-dir-exists" />
    </target>

    <!--
        Copies the documentation directory of the current project into a
        temporary build source tree

        Parameters:
            output.dir      Output directory for the temporary build tree.
    -->
    <target name="copy-docs-dir" if="docs-dir-exists">
        <copy todir="${output.dir}/docs">
            <fileset dir="${basedir}/docs" />
            <filterchain>
                <replacestring from="__DIR__ . '/../../source" to="'${project.name}" />
            </filterchain>
        </copy>
    </target>

    <!--
        Automatically creates a repopositoy tag when all tests have passed.
    -->
    <target name="tag" depends="test-is-svn-checkout,tag-if-project-is-svn-checkout" />

    <target name="test-is-svn-checkout">
        <available file="${basedir}/.svn" property="is-svn-checkout" />
    </target>

    <target name="tag-if-project-is-svn-checkout" depends="init-repository-properties" if="is-svn-checkout">
        <property name="tag.repo" value="${repository}/tags" />
        <property name="tag.name" value="${build.name}-${build.version}" />

        <property name="tag.msg" value="# Auto created tag '${build.version}' after successful build." />

        <echo message="svn copy . ${tag.repo}/${tag.name}" />
        <exec dir="${basedir}" executable="svn">
            <arg line="copy -m '${tag.msg}' . ${tag.repo}/${tag.name}" />
        </exec>
    </target>

    <!--
        Initializes some properties based on the source repository.
    -->
    <target name="init-repository-properties" depends="prepare" if="is-svn-checkout">

        <exec executable="svn" dir="${basedir}" output="${builddir}/~svn-info.xml">
            <arg line="info --xml" />
        </exec>

        <xmlproperty file="${builddir}/~svn-info.xml"
                     keepRoot="true"
                     collapseAttributes="true" />

        <property name="repository" value="${info.entry.repository.root}" />
    </target>

    <!--
        Initializes some properties required for automatic tagging
    -->
    <target name="init-tag-properties" if="is-svn-checkout">
        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd" />
        </tstamp>
    </target>

</project>

<?xml version="1.0" encoding="UTF-8"?>
<!--
    This build file contains all targets for the PHPUnit extension package. So
    that you can use PHPUnit without any trouble in your project.
-->
<project name="ant-build-commons-extensions-phpunit" basedir=".">

    <!--
        Import default properties for this extension.
    -->
    <property file="${resourcedir}/extensions/phpunit/phpunit.properties" />

    <!--
        Import utilized extensions
    -->
    <import file="pear.xml" />

    <!--
        Shortcut for the "phpunit:phpunit" target.
    -->
    <target name="phpunit" depends="phpunit:phpunit" />

    <!--
        This target will run all tests for the current project.

        Parameters:
            ${in.phpunit.include.path} Optional include path that should be
                                       passed to PHPUnit's -include-path cli
                                       option.
            ${in.phpunit.coverage}     Optional boolean flag that enables the
                                       collection of code coverage data.
            $in.phpunit.group}         Optional test group that should be used
                                       to filter the executed tests.
    -->
    <target name="phpunit:phpunit">
        <antcall target="-phpunit:run">
            <param name="in.phpunit.group"        value="${in.phpunit.group}" />
            <param name="in.phpunit.coverage"     value="${in.phpunit.coverage}" />
            <param name="in.phpunit.include.path" value="${in.phpunit.include.path}" />
        </antcall>
    </target>

    <!--
        This target runs all tests flagged with the @group annotation that
        matches the value of the ${phpunit.group.unit} property.

        Parameters:
            ${in.phpunit.include.path} Optional include path that should be
                                       passed to PHPUnit's -include-path cli
                                       option.
            ${in.phpunit.coverage}     Optional boolean flag that enables the
                                       collection of code coverage data.
    -->
    <target name="phpunit:unit">
        <antcall target="-phpunit:run">
            <param name="in.phpunit.group"        value="${phpunit.group.unit}" />
            <param name="in.phpunit.coverage"     value="${in.phpunit.coverage}" />
            <param name="in.phpunit.include.path" value="${in.phpunit.include.path}" />
        </antcall>
    </target>

    <!--
        This target runs all tests flagged with the @group annotation that
        matches the value of the ${phpunit.group.integration} property.

        Parameters:
            ${in.phpunit.include.path} Optional include path that should be
                                       passed to PHPUnit's -include-path cli
                                       option.
            ${in.phpunit.coverage}     Optional boolean flag that enables the
                                       collection of code coverage data.
    -->
    <target name="phpunit:integration">
        <antcall target="-phpunit:run">
            <param name="in.phpunit.group"        value="${phpunit.group.integration}" />
            <param name="in.phpunit.coverage"     value="${in.phpunit.coverage}" />
            <param name="in.phpunit.include.path" value="${in.phpunit.include.path}" />
        </antcall>
    </target>

    <!--
        This target runs all tests flagged with the @group annotation that
        matches the value of the ${phpunit.group.regression} property.

        Parameters:
            ${in.phpunit.include.path} Optional include path that should be
                                       passed to PHPUnit's -include-path cli
                                       option.
            ${in.phpunit.coverage}     Optional boolean flag that enables the
                                       collection of code coverage data.
    -->
    <target name="phpunit:regression">
        <antcall target="-phpunit:run">
            <param name="in.phpunit.group"        value="${phpunit.group.regression}" />
            <param name="in.phpunit.coverage"     value="${in.phpunit.coverage}" />
            <param name="in.phpunit.include.path" value="${in.phpunit.include.path}" />
        </antcall>
    </target>

    <!--
        This target executes the project's test suite and enables the collection
        of code coverage information.

        Parameters:
            ${in.phpunit.include.path} Optional include path that should be
                                       passed to PHPUnit's -include-path cli
                                       option.
            $in.phpunit.group}         Optional test group that should be used
                                       to filter the executed tests.
    -->
    <target name="phpunit:coverage">
        <antcall target="-phpunit:run">
            <param name="in.phpunit.coverage"     value="true" />
            <param name="in.phpunit.group"        value="${in.phpunit.group}" />
            <param name="in.phpunit.include.path" value="${in.phpunit.include.path}" />
        </antcall>
    </target>

    <!--
        This target first tries to upgrade an existing local pear installation
        or install a clean phpunit if no such installation exists. Then it
        delegates to one of the concrete run targets. Which target gets executed
        depends on the ${phpunit.testsuite.file}, if it is set and then if the
        the test file exists. Otherwise the tests will be executed against the
        configured test directory.
    -->
    <target name="-phpunit:run"
            depends="-phpunit:install-or-upgrade,
                     -phpunit:run-testsuite,
                     -phpunit:run-testdir,
                     -phpunit:run-fail" />

    <target name="-phpunit:run-testsuite"
            if="-phpunit:out-testsuite-present"
            depends="-phpunit:is-testsuite-present">

        <condition property="phpunit.include.path" value="" else="--include-path '${in.phpunit.include.path}'">
            <equals arg1="${in.phpunit.include.path}" arg2="$${in.phpunit.include.path}" trim="true" />
        </condition>

        <condition property="phpunit.group" value="" else="--group '${in.phpunit.group}'">
            <equals arg1="${in.phpunit.group}" arg2="$${in.phpunit.group}" trim="true" />
        </condition>

        <condition property="phpunit.clover" value="" else="--coverage-clover '${commons:logsdir}/clover.xml'">
            <equals arg1="${in.phpunit.coverage}" arg2="$${in.phpunit.coverage}" trim="true" />
        </condition>

        <condition property="phpunit.html" value="" else="--coverage-html '${commons:builddir}/coverage'">
            <equals arg1="${in.phpunit.coverage}" arg2="$${in.phpunit.coverage}" trim="true" />
        </condition>

        <condition property="phpunit.conf0" value="--configuration '${basedir}/phpunit.xml'" else="">
            <available file="${basedir}/phpunit.xml" />
        </condition>

        <condition property="phpunit.conf1" value="--configuration '${basedir}/phpunit.xml.dist'" else="">
            <available file="${basedir}/phpunit.xml.dist" />
        </condition>

        <condition property="phpunit.conf" value="${phpunit.conf0}" else="${phpunit.conf1}">
            <equals arg1="${phpunit.conf1}" arg2="" trim="true" />
        </condition>

        <exec executable="${commons.executable.php}"
              failonerror="true"
              dir="${commons.testdir.php}">

            <arg value="-d" />
            <arg value="memory_limit=1024M" />
            <arg value="-d" />
            <arg value="include_path=${pear.local.include.path}" />
            <arg value="${pear.local.bindir}/phpunit" />
            <arg value="--log-junit" />
            <arg value="${commons:logsdir}/junit.xml" />
            <arg line="${phpunit.include.path}" />
            <arg line="${phpunit.group}" />
            <arg line="${phpunit.html}" />
            <arg line="${phpunit.clover}" />
            <arg line="${phpunit.conf}" />
            <arg value="${phpunit.testsuite.class}" />
            <arg value="${commons.testdir.php}/${phpunit.testsuite.file}" />
        </exec>
    </target>

    <!--
        This target tests if a concrete testsuite file is configured and present.
        It will set the ${-phpunit:out-testsuite-present} property to TRUE if it
        exists, otherwise this property will be set to FALSE.
    -->
    <target name="-phpunit:is-testsuite-present">
        <condition property="-phpunit:out-testsuite-present">
            <available file="${commons.testdir.php}/${phpunit.testsuite.file}" />
        </condition>
    </target>

    <target name="-phpunit:run-testdir"
            if="-phpunit:out-testdir-present"
            depends="-phpunit:is-testdir-present">

        <condition property="phpunit.include.path" value="" else="--include-path '${in.phpunit.include.path}'">
            <equals arg1="${in.phpunit.include.path}" arg2="$${in.phpunit.include.path}" trim="true" />
        </condition>

        <condition property="phpunit.group" value="" else="--group '${in.phpunit.group}'">
            <equals arg1="${in.phpunit.group}" arg2="$${in.phpunit.group}" trim="true" />
        </condition>

        <condition property="phpunit.clover" value="" else="--coverage-clover '${commons:logsdir}/clover.xml'">
            <equals arg1="${in.phpunit.coverage}" arg2="$${in.phpunit.coverage}" trim="true" />
        </condition>

        <condition property="phpunit.html" value="" else="--coverage-html '${commons:builddir}/coverage'">
            <equals arg1="${in.phpunit.coverage}" arg2="$${in.phpunit.coverage}" trim="true" />
        </condition>

        <exec executable="${commons.executable.php}"
              failonerror="true"
              dir="${commons.testdir.php}">

            <arg value="-d" />
            <arg value="memory_limit=1024M" />
            <arg value="-d" />
            <arg value="include_path=${pear.local.include.path}" />
            <arg value="${pear.local.bindir}/phpunit" />
            <arg value="--log-junit" />
            <arg value="${commons:logsdir}/junit.xml" />
            <arg line="${phpunit.include.path}" />
            <arg line="${phpunit.group}" />
            <arg line="${phpunit.html}" />
            <arg line="${phpunit.clover}" />
            <arg value="${commons.testdir.php}" />
        </exec>
    </target>

    <target name="-phpunit:is-testdir-present">
        <condition property="-phpunit:out-testdir-present">
            <and>
                <equals arg1="${phpunit.testsuite.file}" arg2="$${phpunit.testsuite.file}" trim="true" />
                <available file="${commons.testdir.php}" />
            </and>
        </condition>
    </target>

    <!--
        This target will fail the build of the  ${phpunit.testsuite.file} is
        defined, but the referenced directory does not exist.
    -->
    <target name="-phpunit:run-fail">
        <fail message="Cannot locate tests for the given project">
            <condition>
                <and>
                    <not>
                        <equals arg1="${phpunit.testsuite.file}" arg2="$${phpunit.testsuite.file}" trim="true" />
                    </not>
                    <not>
                        <available file="${commons.testdir.php}/${phpunit.testsuite.file}" />
                    </not>
                </and>

            </condition>
        </fail>
    </target>

    <!--
        This target will install a local version of phpunit in the project's
        pear installation, so that we can use it in the project. If PHPUnit is
        already installed, this target will perform an upgrade of the PHPUnit
        package.
    -->
    <target name="-phpunit:install-or-upgrade"
            depends="-phpunit:is-installed,
                     -phpunit:install,
                     -phpunit:upgrade" />

    <target name="-phpunit:install" unless="-phpunit:out-installed">
        <antcall target="pear:install">
            <param name="in.pear.package.name" value="${phpunit.package.name}" />
            <param name="in.pear.package.channel" value="${phpunit.package.channel}" />
        </antcall>

        <antcall target="pear:install">
            <param name="in.pear.package.name" value="${phpunit.dbunit.package.name}" />
            <param name="in.pear.package.channel" value="${phpunit.package.channel}" />
        </antcall>

        <antcall target="pear:install">
            <param name="in.pear.package.name" value="${phpunit.selenium.package.name}" />
            <param name="in.pear.package.channel" value="${phpunit.package.channel}" />
        </antcall>
    </target>

    <target name="-phpunit:upgrade" if="-phpunit:out-installed">
        <antcall target="pear:upgrade">
            <param name="in.pear.package.name" value="${phpunit.package.name}" />
            <param name="in.pear.package.channel" value="${phpunit.package.channel}" />
        </antcall>

        <antcall target="pear:upgrade">
            <param name="in.pear.package.name" value="${phpunit.dbunit.package.name}" />
            <param name="in.pear.package.channel" value="${phpunit.package.channel}" />
        </antcall>

        <antcall target="pear:upgrade">
            <param name="in.pear.package.name" value="${phpunit.selenium.package.name}" />
            <param name="in.pear.package.channel" value="${phpunit.package.channel}" />
        </antcall>
    </target>

    <!--
        Tests if phpunit is already installed and sets the a property named
        ${-phpunit:out-installed} to true if it exists.

        Defines:
            ${-phpunit:out-installed} If phpunit is already installed locally.
    -->
    <target name="-phpunit:is-installed">
        <condition property="-phpunit:out-installed">
            <available file="${pear.local.bindir}/phpunit" />
        </condition>
    </target>



    <!--
        EXTENSION POINTS UTILIZED BY THIS MODULE
    -->

    <!--
        This target will hook the the "phpunit:unit" target into the main TEST
        build-step
    -->
    <target name="-phpunit:test:main~hooked"
            depends="phpunit:unit"
            extensionOf="-test:main~hook" />

</project>

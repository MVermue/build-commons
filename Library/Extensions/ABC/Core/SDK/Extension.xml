<?xml version="1.0" encoding="UTF-8"?>
<project name="ABC:Core:SDK"
         xmlns:ac="http://ant-contrib.sourceforge.net"
         xmlns:abc="http://abc.tools.qafoo.com/abc.xsd"
         xmlns:internal="http://abc.tools.qafoo.com/abc-internal.xsd">

    <!--
        Macro to define proper macros inside the abc namespace
        Use exactly like the original macrodef
    -->
    <macrodef name="http://abc.tools.qafoo.com/abc.xsd:macrodef">
        <attribute name="name" />
        <element name="macro" implicit="true" />

        <sequential>
            <macrodef name="http://abc.tools.qafoo.com/abc.xsd:@{name}">
                <macro />
            </macrodef>
        </sequential>
    </macrodef>

    <!--
        Macro to define proper macros inside the internal namespace
        Use exactly like the original macrodef
    -->
    <macrodef name="http://abc.tools.qafoo.com/abc-internal.xsd:macrodef">
        <attribute name="name" />
        <element name="macro" implicit="true" />

        <sequential>
            <macrodef name="http://abc.tools.qafoo.com/abc-internal.xsd:@{name}">
                <macro />
            </macrodef>
        </sequential>
    </macrodef>

    <!--
        Entry point, which any extension has to call first

        This macro defines certain extension based variables, like its directory,
        its resource directory and so on. Furthermore the extension default
        properties will be loaded, if available.

        Using this macro instead of doing everything by oneself ensures all
        necessary steps are executed in the correct order.
    -->
    <abc:macrodef name="extension-init">
        <attribute name="extension" />
        <attribute name="has-resources" default="" />

        <sequential>
            <internal:ABC-Core-SDK-Public-Property-Name-From-Extension
                    extension="@{extension}"
                    property="@{extension}#Public.Property.Prefix" />
            <ac:if>
                <istrue value="@{has-resources}" />
                <ac:then>
                    <internal:ABC-Core-SDK-Resources-Directory
                            extension="@{extension}"
                            property="${@{extension}#Public.Property.Prefix}.resources.directory" />
                </ac:then>
            </ac:if>

            <internal:ABC-Core-SDK-Extension-Directory
                    extension="@{extension}"
                    property="${@{extension}#Public.Property.Prefix}.directory" />

            <property file="@{extension}.Directory/Extension.properties" />
        </sequential>
    </abc:macrodef>

    <!--
        Convert an extension name to a public property name prefix
    -->
    <internal:macrodef name="ABC-Core-SDK-Public-Property-Name-From-Extension">
        <attribute name="extension" />
        <attribute name="property" />

        <sequential>
            <abc:string-lowercase property="@{property}#Not.Lowercased"
                                  input="@{extension}"  />
            <abc:string-filter property="@{property}"
                               input="${@{property}#Not.Lowercased}">
                <replacestring from=":" to="." />
            </abc:string-filter>
        </sequential>
    </internal:macrodef>

    <!--
        Macro that determines the directory of a given extension.
    -->
    <internal:macrodef name="ABC-Core-SDK-Extension-Directory">
        <attribute name="extension" />
        <attribute name="property" />

        <sequential>
            <ac:propertycopy property="@{property}#Extension.File"
                             from="ant.file.@{extension}" />
            <dirname property="@{property}"
                     file="${@{property}#Extension.File}" />
        </sequential>
    </internal:macrodef>

    <!--
        Macro that determines the "Resources" directory of a given extension.
    -->
    <internal:macrodef name="ABC-Core-SDK-Resources-Directory">
        <attribute name="extension" />
        <attribute name="property" />
        <sequential>
            <internal:ABC-Core-SDK-Extension-Directory extension="@{extension}"
                                                       property="@{property}#Extension.Directory" />

            <property name="@{property}"
                  location="${@{property}#Extension.Directory}/Resources" />

            <fail message="The requested 'Resources' directory does not exist for extension '@{extension}'.">
                <condition>
                    <not>
                        <available file="${@{property}}" type="dir" />
                    </not>
                </condition>
            </fail>
        </sequential>
    </internal:macrodef>

    <!--
        Target, which each Extension needs to depend on.

        This Target is used for bootstrapping. As it will be called before any other extension.
        It may initialize build directories or do other *runtime* configuration
    -->
    <target name="-ABC:Core:SDK:Extension">
        <internal:ABC-Core-SDK-Extension-Bootstrap-Common />
        <ac:if>
            <istrue value="${abc.runtime.mode}" />
            <ac:then>
                <internal:ABC-Core-SDK-Extension-Bootstrap-Runtime />
            </ac:then>
            <ac:else>
                <internal:ABC-Core-SDK-Extension-Bootstrap-Configure />
            </ac:else>
        </ac:if>
    </target>

    <!--
        Initialization which is done during both phases
    -->
    <internal:macrodef name="ABC-Core-SDK-Extension-Bootstrap-Common">
        <sequential>
        </sequential>
    </internal:macrodef>

    <!--
        Initialization which is done only during runtime
    -->
    <internal:macrodef name="ABC-Core-SDK-Extension-Bootstrap-Runtime">
        <sequential>
            <echo message="Runtime Bootstrap" />
        </sequential>
    </internal:macrodef>

    <!--
        Initialization which is done only during configure
    -->
    <internal:macrodef name="ABC-Core-SDK-Extension-Bootstrap-Configure">
        <sequential>
            <echo message="Configure Bootstrap" />
        </sequential>
    </internal:macrodef>
</project>

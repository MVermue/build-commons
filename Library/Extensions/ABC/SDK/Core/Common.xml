<?xml version="1.0" encoding="UTF-8"?>
<project name="ABC:SDK:Core:Common"
         xmlns:ac="http://ant-contrib.sourceforge.net"
         xmlns:abc="http://abc.tools.qafoo.com/abc.xsd"
         xmlns:internal="http://abc.tools.qafoo.com/abc-internal.xsd">

    <!--
        Macro to define proper macros inside the abc namespace
        Use exactly like the original macrodef
    -->
    <macrodef name="http://abc.tools.qafoo.com/abc.xsd:macrodef">
        <attribute name="name" />
        <element name="macro" implicit="true" />

        <sequential>
            <macrodef name="http://abc.tools.qafoo.com/abc.xsd:@{name}">
                <macro />
            </macrodef>
        </sequential>
    </macrodef>

    <!--
        Macro to define proper macros inside the internal namespace
        Use exactly like the original macrodef
    -->
    <macrodef name="http://abc.tools.qafoo.com/abc-internal.xsd:macrodef">
        <attribute name="name" />
        <element name="macro" implicit="true" />

        <sequential>
            <macrodef name="http://abc.tools.qafoo.com/abc-internal.xsd:@{name}">
                <macro />
            </macrodef>
        </sequential>
    </macrodef>

    <!--
        Spawn a new and independant ant instance
    -->
    <abc:macrodef name="spawn-ant">
        <attribute name="file" />
        <attribute name="dir" default="${project.build.directory}"/>
        <attribute name="target" default="" />
        <attribute name="quiet" default="false" />
        <attribute name="taskname-overwrite" default="ant" />

        <sequential>
            <ac:var name="-ABC.SDK.Core.Spawn-Ant.Quiet.Argument"
                    unset="true" />
            <condition property="-ABC.SDK.Core.Spawn-Ant.Quiet.Argument"
                       value="-quiet"
                       else="">
                <istrue value="@{quiet}" />
            </condition>

            <java classname="org.apache.tools.ant.Main"
                  classpath="${java.class.path}"
                  taskname="@{taskname-overwrite}"
                  fork="true"
                  dir="${project.build.directory}">
                <arg value="${-ABC.SDK.Core.Spawn-Ant.Quiet.Argument}" />
                <arg value="-emacs" />
                <arg value="-buildfile" />
                <arg value="@{file}" />
                <arg value="@{target}" />
            </java>
        </sequential>
    </abc:macrodef>

    <!--
        Convert an extension name to a public property name prefix
    -->
    <internal:macrodef name="ABC-SDK-Core-Public-Property-Name-From-Extension">
        <attribute name="extension" />
        <attribute name="property" />

        <sequential>
            <abc:string-lowercase property="@{property}#Not.Lowercased"
                                  input="@{extension}"  />
            <abc:string-filter property="@{property}"
                               input="${@{property}#Not.Lowercased}">
                <replaceregex pattern=":(Extension|Configure|Common)$"
                              replace=""
                              flags="i" />
                <replacestring from=":" to="." />
            </abc:string-filter>
        </sequential>
    </internal:macrodef>

    <!--
        Macro that determines the directory of a given extension.
    -->
    <internal:macrodef name="ABC-SDK-Core-Extension-Directory">
        <attribute name="extension" />
        <attribute name="property" />

        <sequential>
            <ac:propertycopy property="@{property}#Extension.File"
                             from="ant.file.@{extension}" />
            <dirname property="@{property}"
                     file="${@{property}#Extension.File}" />
        </sequential>
    </internal:macrodef>

    <!--
        Macro that determines the "Resources" directory of a given extension.
    -->
    <internal:macrodef name="ABC-SDK-Core-Resources-Directory">
        <attribute name="extension" />
        <attribute name="property" />
        <sequential>
            <internal:ABC-SDK-Core-Extension-Directory extension="@{extension}"
                                                       property="@{property}#Extension.Directory" />

            <property name="@{property}"
                  location="${@{property}#Extension.Directory}/Resources" />

            <fail message="The requested 'Resources' directory does not exist for extension '@{extension}'.">
                <condition>
                    <not>
                        <available file="${@{property}}" type="dir" />
                    </not>
                </condition>
            </fail>
        </sequential>
    </internal:macrodef>

</project>
